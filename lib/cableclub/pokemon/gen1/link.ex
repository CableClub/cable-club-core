defmodule CableClub.Pokemon.Gen1.Link do
  @moduledoc """
  State Machine for a Gen 1 link
  """

  alias CableClub.Pokemon.Gen1.Link

  @type state :: :unknown | :not_connected | :connected | :trade_centre | :colosseum
  @type trade_centre_state ::
          :init
          | :send_rand0
          | :send_rand1
          | :send_rand2
          | :send_rand3
          | :send_rand4
          | :send_rand5
          | :send_rand6
          | :send_rand7
          | :send_rand8
          | :send_rand9
          | :wait
          | :send_data
          | :send_patch

  @party <<
    0x92,
    0x93,
    0x88,
    0x8D,
    0x82,
    0x88,
    0x87,
    0x80,
    0x97,
    0x50,
    0x0,
    0x6,
    0x16,
    0x61,
    0x93,
    0x9A,
    0xAB,
    0x91,
    0xFF,
    0x16,
    0x0,
    0xAA,
    0xF,
    0x0,
    0x15,
    0x2,
    0xFF,
    0x39,
    0x21,
    0x2C,
    0x52,
    0xC5,
    0x43,
    0x2,
    0x40,
    0xAE,
    0x2B,
    0x8,
    0x33,
    0xDA,
    0x2F,
    0x92,
    0x3A,
    0xDD,
    0x30,
    0xA1,
    0xD,
    0xB0,
    0xF,
    0x23,
    0x19,
    0xA,
    0x31,
    0x0,
    0xAA,
    0x0,
    0x8D,
    0x0,
    0x6C,
    0x0,
    0x6D,
    0x0,
    0x74,
    0x61,
    0x0,
    0x9B,
    0x0,
    0x0,
    0x4,
    0x4,
    0xFF,
    0x81,
    0xF,
    0xA3,
    0x5B,
    0xC5,
    0x43,
    0x1,
    0xB5,
    0x9F,
    0x23,
    0xEF,
    0x2A,
    0x6A,
    0x2A,
    0x20,
    0x26,
    0x7C,
    0x23,
    0xD7,
    0x9F,
    0x59,
    0x14,
    0x1E,
    0x14,
    0x4C,
    0x30,
    0x0,
    0x9B,
    0x0,
    0x7A,
    0x0,
    0x89,
    0x0,
    0x54,
    0x0,
    0x4D,
    0x93,
    0x0,
    0x8B,
    0x25,
    0x0,
    0x8,
    0x3,
    0xBE,
    0x7A,
    0x8A,
    0x65,
    0x5F,
    0xC5,
    0x43,
    0x2,
    0xCC,
    0x1F,
    0x27,
    0xD4,
    0x31,
    0x40,
    0x3F,
    0x1,
    0x2F,
    0x7E,
    0x29,
    0xB0,
    0x81,
    0x92,
    0x1E,
    0xF,
    0x52,
    0x14,
    0x39,
    0x0,
    0x8B,
    0x0,
    0x57,
    0x0,
    0x4B,
    0x0,
    0x8A,
    0x0,
    0x98,
    0x9A,
    0x0,
    0x9E,
    0x26,
    0x0,
    0x16,
    0x3,
    0x2D,
    0x21,
    0x4B,
    0xE,
    0x16,
    0xC5,
    0x43,
    0x1,
    0xD3,
    0x4F,
    0x35,
    0x22,
    0x36,
    0xC9,
    0x38,
    0xF8,
    0x38,
    0x96,
    0x29,
    0x68,
    0x8B,
    0x6A,
    0x23,
    0x19,
    0x1E,
    0xA,
    0x32,
    0x0,
    0x9E,
    0x0,
    0x6D,
    0x0,
    0x72,
    0x0,
    0x6A,
    0x0,
    0x7F,
    0xAB,
    0x0,
    0x6C,
    0x1E,
    0x0,
    0x5,
    0x2,
    0x2D,
    0x11,
    0x61,
    0x13,
    0x30,
    0xC5,
    0x43,
    0x0,
    0xC9,
    0x41,
    0x2,
    0xBB,
    0x3,
    0x4B,
    0x3,
    0x58,
    0x3,
    0x1D,
    0x3,
    0x3F,
    0x93,
    0x8A,
    0x23,
    0x1E,
    0xF,
    0x14,
    0x22,
    0x0,
    0x6C,
    0x0,
    0x54,
    0x0,
    0x35,
    0x0,
    0x64,
    0x0,
    0x36,
    0x91,
    0x0,
    0x7A,
    0x2A,
    0x0,
    0x4,
    0x4,
    0xBE,
    0x7D,
    0x82,
    0x46,
    0x74,
    0xC5,
    0x43,
    0x1,
    0x8E,
    0x22,
    0x21,
    0x8E,
    0x26,
    0x7B,
    0x24,
    0xEC,
    0x1C,
    0x1F,
    0x29,
    0x57,
    0xE4,
    0x2B,
    0x14,
    0xF,
    0xF,
    0x1E,
    0x2E,
    0x0,
    0x7A,
    0x0,
    0x66,
    0x0,
    0x78,
    0x0,
    0x39,
    0x0,
    0x48,
    0x83,
    0x84,
    0x94,
    0x92,
    0x82,
    0x87,
    0x50,
    0x0,
    0x0,
    0x0,
    0x0,
    0x83,
    0x84,
    0x94,
    0x92,
    0x82,
    0x87,
    0x50,
    0x0,
    0x0,
    0x0,
    0x0,
    0x83,
    0x84,
    0x94,
    0x92,
    0x82,
    0x87,
    0x50,
    0x0,
    0x0,
    0x0,
    0x0,
    0x83,
    0x84,
    0x94,
    0x92,
    0x82,
    0x87,
    0x50,
    0x0,
    0x0,
    0x0,
    0x0,
    0x83,
    0x84,
    0x94,
    0x92,
    0x82,
    0x87,
    0x50,
    0x0,
    0x0,
    0x0,
    0x0,
    0x83,
    0x84,
    0x94,
    0x92,
    0x82,
    0x87,
    0x50,
    0x0,
    0x0,
    0x0,
    0x0,
    0x86,
    0x98,
    0x80,
    0x91,
    0x80,
    0x83,
    0x8E,
    0x92,
    0x50,
    0x50,
    0x50,
    0x92,
    0x80,
    0x8D,
    0x83,
    0x92,
    0x8B,
    0x80,
    0x92,
    0x87,
    0x50,
    0x50,
    0x87,
    0x80,
    0x94,
    0x8D,
    0x93,
    0x84,
    0x91,
    0x50,
    0x50,
    0x50,
    0x50,
    0x95,
    0x84,
    0x8D,
    0x94,
    0x92,
    0x80,
    0x94,
    0x91,
    0x50,
    0x50,
    0x50,
    0x80,
    0x84,
    0x91,
    0x8E,
    0x83,
    0x80,
    0x82,
    0x93,
    0x98,
    0x8B,
    0x50,
    0x8C,
    0x80,
    0x91,
    0x8E,
    0x96,
    0x80,
    0x8A,
    0x50,
    0x50,
    0x50,
    0x50
  >>

  defstruct state: :unknown, trade_center_state: :init, party: @party

  @doc "returns a clean state"
  def reset(_link) do
    %Link{}
  end

  def transfer(%{state: :unknown} = link, 0x02) do
    {0x1, %{link | state: :not_connected}}
  end

  def transfer(%{state: :unknown} = link, _) do
    {0x1, link}
  end

  def transfer(%{state: :not_connected} = link, 0x2) do
    {0x0, link}
  end

  def transfer(%{state: :not_connected} = link, 0x0) do
    {0x60, link}
  end

  def transfer(%{state: :not_connected} = link, 0x60) do
    {0x60, %{link | state: :connected}}
  end

  def transfer(%{state: :not_connected} = link, _input) do
    {0x1, link}
  end

  def transfer(%{state: :connected} = link, 0x2) do
    {0x1, %{link | state: :unknown}}
  end

  def transfer(%{state: :connected} = link, 0xD4) do
    {0xD4, %{link | state: :trade_centre}}
  end

  def transfer(%{state: :connected} = link, 0xD5) do
    {0xD6, link}
  end

  def transfer(%{state: :connected} = link, 0xD6) do
    {0xD6, %{link | state: :unknown}}
  end

  def transfer(%{state: :connected} = link, input) do
    {input, link}
  end

  def transfer(%{state: :trade_centre, trade_centre_state: :init} = link, 0xFD) do
    {0xFD, %{link | trade_center_state: {:send_rand, 0}}}
  end

  def transfer(%{state: :trade_centre, trade_centre_state: :init} = link, input) do
    {input, link}
  end

  def transfer(%{state: :trade_centre, trade_center_state: {:send_rand, 10}} = link, _in) do
    {0xFD, %{link | trade_center_state: :wait}}
  end

  def transfer(%{state: :trade_centre, trade_center_state: {:send_rand, num}} = link, _in) do
    {Enum.random(0..0xFD), %{link | trade_center_state: {:send_rand, num + 1}}}
  end

  def transfer(%{state: :trade_centre, trade_center_state: :wait} = link, 0xFD) do
    {0xFD, %{link | trade_center_state: :send_data}}
  end

  def transfer(
        %{state: :trade_centre, trade_center_state: :send_data, party: <<output, rest::binary>>} =
          link,
        _input
      ) do
    {output, %{link | party: rest}}
  end

  def transfer(%{state: :trade_centre, trade_center_state: :send_data, party: <<>>} = link, input) do
    {input, %{link | trade_center_state: :send_patch}}
  end

  def transfer(%{state: :trade_centre} = link, input) do
    {input, link}
  end
end
